version: '3.8'

services:
  # PostgreSQL数据库
  postgres:
    image: postgres:15-alpine
    container_name: multi-agent-postgres
    environment:
      POSTGRES_DB: multi_agent_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/backend/src/database/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - multi-agent-network

  # Redis缓存
  redis:
    image: redis:7-alpine
    container_name: multi-agent-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - multi-agent-network

  # 后端服务（开发模式）
  backend:
    build:
      context: .
      dockerfile: packages/backend/Dockerfile.dev
    container_name: multi-agent-backend
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/multi_agent_platform
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-jwt-secret-key
      PORT: 3001
      HOST: 0.0.0.0
    ports:
      - "3001:3001"
    volumes:
      - ./packages/backend:/app/packages/backend
      - ./packages/shared:/app/packages/shared
      - /app/packages/backend/node_modules
      - /app/packages/shared/node_modules
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - multi-agent-network
    command: npm run dev

  # 前端服务（开发模式）
  frontend:
    build:
      context: .
      dockerfile: packages/frontend/Dockerfile.dev
    container_name: multi-agent-frontend
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
      NEXT_PUBLIC_WS_URL: ws://localhost:3001
    ports:
      - "3000:3000"
    volumes:
      - ./packages/frontend:/app/packages/frontend
      - ./packages/shared:/app/packages/shared
      - /app/packages/frontend/node_modules
      - /app/packages/shared/node_modules
    depends_on:
      - backend
    networks:
      - multi-agent-network
    command: npm run dev

  # n8n工作流引擎
  n8n:
    image: n8nio/n8n:latest
    container_name: multi-agent-n8n
    environment:
      DB_TYPE: postgresdb
      DB_POSTGRESDB_HOST: postgres
      DB_POSTGRESDB_PORT: 5432
      DB_POSTGRESDB_DATABASE: n8n
      DB_POSTGRESDB_USER: postgres
      DB_POSTGRESDB_PASSWORD: postgres
      N8N_BASIC_AUTH_ACTIVE: true
      N8N_BASIC_AUTH_USER: admin
      N8N_BASIC_AUTH_PASSWORD: admin123
      WEBHOOK_URL: http://localhost:5678
      GENERIC_TIMEZONE: UTC
    ports:
      - "5678:5678"
    volumes:
      - n8n_data:/home/node/.n8n
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - multi-agent-network

  # Prometheus监控
  prometheus:
    image: prom/prometheus:latest
    container_name: multi-agent-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - multi-agent-network

  # Grafana仪表板
  grafana:
    image: grafana/grafana:latest
    container_name: multi-agent-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - multi-agent-network

volumes:
  postgres_data:
  redis_data:
  n8n_data:
  prometheus_data:
  grafana_data:

networks:
  multi-agent-network:
    driver: bridge